# Main Workflow
# Trigger on every commit to staging
name: Action on push to staging
on:
  push:
    branches:
      - staging
  pull_request:
    branches:
      - staging
  workflow_dispatch:

jobs:
  copy-theme-to-main:
    name: Copy Themes content to main branch
    runs-on: ubuntu-latest
    env:
      TARGET_BRANCH_NAME: 'main'
      GIT_COMMITTER_NAME: '1bl4z3r'
      GIT_COMMITTER_EMAIL: '34515568+1bl4z3r@users.noreply.github.com'
    steps:
      - name: Checkout source branch (${{ github.ref_name }})
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref_name }} # Source branch (e.g., staging)
          path: source_checkout
          submodules: true
          fetch-depth: 0

      - name: Checkout target branch (${{ env.TARGET_BRANCH_NAME }})
        uses: actions/checkout@v4
        with:
          ref: ${{ env.TARGET_BRANCH_NAME }} # Target branch (e.g., main)
          path: target_checkout
          fetch-depth: 0

      - name: Copy files and commit to target branch
        run: |
          set -e # Exit immediately if a command exits with a non-zero status.

          echo "Source branch: ${{ github.ref_name }}"
          echo "Target branch: ${{ env.TARGET_BRANCH_NAME }}"

          temp_files_list=$(mktemp)

          echo "Identifying files to copy from source branch (${{ github.ref_name }})..."
          # Paths in temp_files_list will be relative to source_checkout.
          # grep uses Basic Regular Expressions (BRE) by default. `\|` is OR, `\.` is literal dot.
          # This grep pattern filters out specified files and directories.
          cd source_checkout
          find . -type f -print0 | \
            grep -v 'resources\|git\|static\|content\|public\|hugo\.toml$\|assets/custom\|assets/images\|928-600x400\.jpg\|images/favicon\.svg\|hugo_build\.lock\|i18n\|hermit\.webp\|\.gitignore' \
            > "${GITHUB_WORKSPACE}/${temp_files_list##*/}" # Write to temp file in GITHUB_WORKSPACE
          cd .. # Back to GITHUB_WORKSPACE

          if ! [ -s "$temp_files_list" ]; then
            echo "No files found to copy from ${{ github.ref_name }} after filtering."
          else
            echo "Copying files from ${{ github.ref_name }} to ${{ env.TARGET_BRANCH_NAME }} using rsync..."
            # rsync -a: archive mode (preserves permissions, ownership, timestamps, etc.)
            # --from0: indicates that the file list from --files-from is NUL-terminated.
            # --files-from: specifies the file containing the list of files to transfer.
            # source_checkout/ : source directory (trailing slash copies contents).
            # target_checkout/ : destination directory.
            rsync -a --from0 --files-from="$temp_files_list" source_checkout/ target_checkout/
          fi
          rm "$temp_files_list" # Clean up the temporary file list

          echo "Configuring git user in target checkout..."
          cd target_checkout
          # Configure git user for this commit. Using --global is generally fine in ephemeral CI runners.
          git config --global user.name '${{ env.GIT_COMMITTER_NAME }}'
          git config --global user.email '${{ env.GIT_COMMITTER_EMAIL }}'

          echo "Staging changes in ${{ env.TARGET_BRANCH_NAME }}..."
          git add -A

          echo "Committing changes if any to ${{ env.TARGET_BRANCH_NAME }}..."
          COMMIT_MSG="${{ github.event.head_commit.message }}"
          # Fallback commit message if the original one is empty (e.g., for workflow_dispatch triggers)
          if [ -z "$COMMIT_MSG" ]; then
            COMMIT_MSG="Sync theme files from ${{ github.ref_name }} to ${{ env.TARGET_BRANCH_NAME }}"
          fi

          if git diff-index --quiet HEAD; then
            echo "No changes to commit to ${{ env.TARGET_BRANCH_NAME }}."
          else
            echo "Committing to ${{ env.TARGET_BRANCH_NAME }} with message: $COMMIT_MSG"
            git commit -sm "$COMMIT_MSG" # -s for sign-off, -m for message
          fi

          echo "Pushing changes to remote branch ${{ env.TARGET_BRANCH_NAME }}..."
          # Removed --force for safety. A regular push will fail if the target branch has new commits,
          # preventing accidental overwrites.
          git push origin ${{ env.TARGET_BRANCH_NAME }}
          cd .. # Back to GITHUB_WORKSPACE

  analyze:
    name: Analyze (${{ matrix.language }})
    runs-on: ubuntu-latest
    timeout-minutes: 360
    permissions:
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        include:
        - language: javascript-typescript
          build-mode: none
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        build-mode: ${{ matrix.build-mode }}
    - if: matrix.build-mode == 'manual'
      run: |
        echo 'If you are using a "manual" build mode for one or more of the' \
          'languages you are analyzing, replace this with the commands to build' \
          'your code, for example:'
        echo '  make bootstrap'
        echo '  make release'
        exit 1
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"
  build-and-deploy-site:
    name: Build and Deploy Hugo
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 0
      - name: Setup Hugo
        uses: peaceiris/actions-hugo@v3
        with:
          hugo-version: 'latest'
          extended: true
      - name: Build site with Hugo
        run: hugo --minify --noBuildLock --ignoreCache --gc --logLevel debug && cp public/en/404.html public/404.html
      - name: Deploy to GitHub Pages
        if: github.event_name == 'push' && github.ref == 'refs/heads/staging'
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./public
          publish_branch: gh-pages