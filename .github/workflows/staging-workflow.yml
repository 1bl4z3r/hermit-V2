# Main Workflow
# Trigger on every commit to staging
name: Action on push to staging
on:
  push:
    branches:
      - staging
  pull_request:
    branches:
      - staging
  workflow_dispatch:

jobs:
  sync-branches:
    name: Sync staging to main branch
    runs-on: ubuntu-latest
    env:
      SOURCE_BRANCH: 'staging'
      TARGET_BRANCH: 'main'
      GIT_COMMITTER_NAME: '1bl4z3r'
      GIT_COMMITTER_EMAIL: '34515568+1bl4z3r@users.noreply.github.com'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for all branches

      - name: Setup git configuration
        run: |
          git config user.name '${{ env.GIT_COMMITTER_NAME }}'
          git config user.email '${{ env.GIT_COMMITTER_EMAIL }}'
          
          # Make sure we have the latest from remote
          git fetch origin ${{ env.SOURCE_BRANCH }}:${{ env.SOURCE_BRANCH }} || git branch ${{ env.SOURCE_BRANCH }}
          git fetch origin ${{ env.TARGET_BRANCH }}:${{ env.TARGET_BRANCH }} || git branch ${{ env.TARGET_BRANCH }}

      - name: Sync changes from staging to main
        run: |
          # Define our exclusion patterns as an array in bash
          declare -a EXCLUDE_PATTERNS=(
            "resources"
            ".git"
            "static"
            "content"
            "public"
            "hugo.toml"
            "assets/custom"
            "assets/images"
            "928-600x400.jpg"
            "images/favicon.svg"
            "hugo_build.lock"
            "i18n"
            "hermit.webp"
            ".gitignore"
          )
          
          # Create a grep pattern from our exclusion array (join with \|)
          EXCLUDE_PATTERN=$(IFS="|"; echo "${EXCLUDE_PATTERNS[*]}")
          
          echo "Syncing from ${{ env.SOURCE_BRANCH }} to ${{ env.TARGET_BRANCH }}"
          
          # Step 1: Create temporary working branches
          echo "Creating temporary working branches..."
          git checkout ${{ env.SOURCE_BRANCH }}
          git checkout -b temp-source ${{ env.SOURCE_BRANCH }}
          
          git checkout ${{ env.TARGET_BRANCH }}
          git checkout -b temp-target ${{ env.TARGET_BRANCH }}
          
          # Step 2: Create lists of files (exclude patterns applied)
          echo "Creating file lists..."
          # Switch to source branch to list files
          git checkout temp-source
          SOURCE_FILES=$(git ls-files | grep -v -E "$EXCLUDE_PATTERN")
          echo "$SOURCE_FILES" > /tmp/source_files.txt
          echo "Source files count: $(wc -l < /tmp/source_files.txt)"
          
          # Switch to target branch to list files
          git checkout temp-target
          TARGET_FILES=$(git ls-files | grep -v -E "$EXCLUDE_PATTERN")
          echo "$TARGET_FILES" > /tmp/target_files.txt
          echo "Target files count: $(wc -l < /tmp/target_files.txt)"
          
          # Step 3: Find files to delete (in target but not in source)
          echo "Finding files to delete..."
          comm -23 <(sort /tmp/target_files.txt) <(sort /tmp/source_files.txt) > /tmp/files_to_delete.txt
          echo "Files to delete count: $(wc -l < /tmp/files_to_delete.txt)"
          
          # Step 4: Create a new branch from target for our changes
          echo "Creating sync branch from ${{ env.TARGET_BRANCH }}..."
          git checkout ${{ env.TARGET_BRANCH }}
          git checkout -b sync-branch
          
          # Step 5: Delete files that were removed from source
          if [ -s /tmp/files_to_delete.txt ]; then
            echo "Deleting files that were removed from source branch..."
            while IFS= read -r file_to_delete; do
              if [ -f "$file_to_delete" ]; then
                echo "Deleting: $file_to_delete"
                git rm "$file_to_delete"
              fi
            done < /tmp/files_to_delete.txt
          else
            echo "No files to delete"
          fi
          
          # Step 6: Copy files from source branch
          if [ -s /tmp/source_files.txt ]; then
            echo "Copying files from source branch..."
            # For each file in source branch
            while IFS= read -r file_path; do
              # Create directory structure if needed
              mkdir -p "$(dirname "$file_path")" 2>/dev/null || true
              
              # Copy content from source branch
              git checkout ${{ env.SOURCE_BRANCH }} -- "$file_path" 2>/dev/null || true
            done < /tmp/source_files.txt
            
            # Stage all changes
            git add -A
          else
            echo "No files to copy from source branch"
          fi
          
          # Step 7: Commit and push changes
          echo "Committing changes..."
          # Get commit message from the triggering commit, or use default
          COMMIT_MSG="${{ github.event.head_commit.message }}"
          if [ -z "$COMMIT_MSG" ]; then
            COMMIT_MSG="Sync files from ${{ env.SOURCE_BRANCH }} to ${{ env.TARGET_BRANCH }}"
          fi
          
          # Check if there are changes to commit
          if git diff --cached --quiet; then
            echo "No changes to commit to ${{ env.TARGET_BRANCH }}."
          else
            echo "Committing to ${{ env.TARGET_BRANCH }} with message: $COMMIT_MSG"
            git commit -sm "$COMMIT_MSG" # -s for sign-off, -m for message
            
            echo "Pushing changes to remote branch ${{ env.TARGET_BRANCH }}..."
            git push origin sync-branch:${{ env.TARGET_BRANCH }}
          fi

  analyze:
    name: Analyze (${{ matrix.language }})
    runs-on: ubuntu-latest
    timeout-minutes: 360
    permissions:
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        include:
        - language: javascript-typescript
          build-mode: none
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        build-mode: ${{ matrix.build-mode }}

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"

  build-and-deploy-site:
    name: Build and Deploy Hugo
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 0
      - name: Setup Hugo
        uses: peaceiris/actions-hugo@v3
        with:
          hugo-version: 'latest'
          extended: true
      - name: Build site with Hugo
        run: hugo --minify --noBuildLock --ignoreCache --gc --logLevel debug && cp public/en/404.html public/404.html
      - name: Deploy to GitHub Pages
        if: github.event_name == 'push' && github.ref == 'refs/heads/staging'
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./public
          publish_branch: gh-pages