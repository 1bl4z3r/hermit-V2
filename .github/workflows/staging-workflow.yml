# Main Workflow
# Trigger on every commit to staging
name: Action on push to staging
on:
  push:
    branches:
      - staging
  pull_request:
    branches:
      - staging
  workflow_dispatch:

jobs:
  copy-theme-to-main:
    name: Copy Themes content to main branch
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 0
      - name: Push to main
        env:
          SOURCE: '.'
          TARGET: 'main'
          NAME: 1bl4z3r
          EMAIL: 34515568+1bl4z3r@users.noreply.github.com
          SOURCE_BRANCH: ${{ github.ref_name }} # e.g., staging
        run: |
          set -e # Exit immediately if a command exits with a non-zero status.

          git config --global user.name '${{env.NAME}}'
          git config --global user.email '${{env.EMAIL}}'

          echo "Current branch is ${{env.SOURCE_BRANCH}}"
          echo "Identifying files to copy from ${{env.SOURCE_BRANCH}}..."
          # This find command runs on the content of the SOURCE_BRANCH (staging)
          # It lists all files (-type f) from the current directory (env.SOURCE which is '.')
          # Then, grep filters out files matching the specified patterns.
          # -print0, -z, -Z, and xargs -0 are used for robust handling of filenames with special characters.
          files_to_copy_list_file=$(mktemp)
          find ${{env.SOURCE}} -type f -print0 | grep -vzZE 'resources\|git\|static\|content\|public\|hugo.toml$\|assets/custom\|928-600x400.jpg\|images/favicon.svg\|hugo_build.lock\|i18n\|hermit.webp\|gitignore' > "$files_to_copy_list_file"

          echo "Fetching remote branches..."
          git fetch origin

          echo "Checking out target branch: ${{env.TARGET}}"
          git checkout ${{env.TARGET}} # Checkout to the main branch

          if ! [ -s "$files_to_copy_list_file" ]; then
            echo "No files found to copy from ${{env.SOURCE_BRANCH}} after filtering."
          else
            echo "Copying files from ${{env.SOURCE_BRANCH}} to ${{env.TARGET}}..."
            # xargs -0 reads NUL-delimited filenames from the file.
            # -r (or --no-run-if-empty) ensures git checkout is not run if no files are listed.
            # This command checks out the listed files from the SOURCE_BRANCH into the current working directory (which is now TARGET branch).
            xargs -0 -r --arg-file="$files_to_copy_list_file" git checkout "${{env.SOURCE_BRANCH}}" --
          fi
          rm "$files_to_copy_list_file" # Clean up the temporary file

          echo "Staging changes..."
          git add -A

          echo "Committing changes if any..."
          if git diff-index --quiet HEAD; then
            echo "No changes to commit."
          else
            echo "Committing with message from source branch: ${{ github.event.head_commit.message }}"
            git commit -sm "${{ github.event.head_commit.message }}" # commit with sign-off
          fi

          echo "Pushing to remote branch ${{env.TARGET}}..."
          git push origin ${{env.TARGET}} --force
  analyze:
    name: Analyze (${{ matrix.language }})
    runs-on: ubuntu-latest
    timeout-minutes: 360
    permissions:
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        include:
        - language: javascript-typescript
          build-mode: none
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        build-mode: ${{ matrix.build-mode }}
    - if: matrix.build-mode == 'manual'
      run: |
        echo 'If you are using a "manual" build mode for one or more of the' \
          'languages you are analyzing, replace this with the commands to build' \
          'your code, for example:'
        echo '  make bootstrap'
        echo '  make release'
        exit 1
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"
  build-and-deploy-site:
    name: Build and Deploy Hugo
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 0
      - name: Setup Hugo
        uses: peaceiris/actions-hugo@v3
        with:
          hugo-version: 'latest'
          extended: true
      - name: Build site with Hugo
        run: hugo --minify --noBuildLock --ignoreCache --gc --logLevel debug && cp public/en/404.html public/404.html
      - name: Deploy to GitHub Pages
        if: github.event_name == 'push' && github.ref == 'refs/heads/staging'
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./public
          publish_branch: gh-pages