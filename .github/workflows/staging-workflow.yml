# Main Workflow
# Trigger on every commit to staging
name: Action on push to staging
on:
  push:
    branches:
      - staging
  pull_request:
    branches:
      - staging
  workflow_dispatch:

jobs:
  sync-branches:
    name: Sync staging to main branch
    runs-on: ubuntu-latest
    env:
      SOURCE_BRANCH_NAME: 'staging'
      TARGET_BRANCH_NAME: 'main'
      GIT_COMMITTER_NAME: '1bl4z3r'
      GIT_COMMITTER_EMAIL: '34515568+1bl4z3r@users.noreply.github.com'
    steps:
      - name: Checkout repository with both branches
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref_name }} # Source branch (e.g., staging)
          fetch-depth: 0 # Fetch all history for all branches
      
      - name: Setup git configuration
        run: |
          git config user.name '${{ env.GIT_COMMITTER_NAME }}'
          git config user.email '${{ env.GIT_COMMITTER_EMAIL }}'
      
      - name: Set up target branch
        run: |
          echo "Setting up target branch: ${{ env.TARGET_BRANCH_NAME }}"
          # Create a local copy of the target branch
          git fetch origin ${{ env.TARGET_BRANCH_NAME }}:${{ env.TARGET_BRANCH_NAME }}
          # Create a temporary branch based on the target branch
          git checkout -b temp-target-branch ${{ env.TARGET_BRANCH_NAME }}
      
      - name: Create exclusion list
        run: |
          # Create a file with exclusion patterns (one per line)
          cat << EOF > exclude_patterns.txt
          resources
          .git
          static
          content
          public
          hugo.toml
          assets/custom
          assets/images
          928-600x400.jpg
          images/favicon.svg
          hugo_build.lock
          i18n
          hermit.webp
          .gitignore
          EOF
      
      - name: Create list of files to sync
        run: |
          echo "Creating list of files to sync from ${{ env.SOURCE_BRANCH_NAME }}"
          
          # Checkout the source branch to get its file listing
          git checkout ${{ env.SOURCE_BRANCH_NAME }}
          
          # Find all files in the source branch and exclude specified patterns
          find . -type f | grep -v -f exclude_patterns.txt > source_files.txt
          
          # Checkout the temporary target branch
          git checkout temp-target-branch
          
          # Find all files in the target branch and exclude specified patterns
          find . -type f | grep -v -f exclude_patterns.txt > target_files.txt
          
          # Find files that should be deleted (in target but not in source)
          # Use grep with -F (fixed strings) and -x (exact match) to compare complete paths
          grep -v -f source_files.txt target_files.txt > files_to_delete.txt || true
          
          # Go back to source branch to prepare for sync
          git checkout ${{ env.SOURCE_BRANCH_NAME }}
          
          echo "Files to sync:"
          cat source_files.txt
          
          echo "Files to delete:"
          cat files_to_delete.txt
      
      - name: Sync changes to target branch
        run: |
          echo "Syncing changes from ${{ env.SOURCE_BRANCH_NAME }} to ${{ env.TARGET_BRANCH_NAME }}"
          
          # Create a new branch based on the target branch
          git checkout -b synced-branch ${{ env.TARGET_BRANCH_NAME }}
          
          # Delete files that were removed from source
          if [ -s files_to_delete.txt ]; then
            echo "Deleting files that were removed from source branch"
            while IFS= read -r file_to_delete; do
              echo "Deleting: $file_to_delete"
              git rm -f "$file_to_delete" || true
            done < files_to_delete.txt
          else
            echo "No files to delete"
          fi
          
          # Copy files from source branch
          if [ -s source_files.txt ]; then
            echo "Copying files from source branch"
            
            # Checkout source branch files
            git checkout ${{ env.SOURCE_BRANCH_NAME }} -- $(cat source_files.txt)
            
            # Stage all changes
            git add -A
          else
            echo "No files to copy from source branch"
          fi
          
          # Prepare commit message
          COMMIT_MSG="${{ github.event.head_commit.message }}"
          # Fallback commit message
          if [ -z "$COMMIT_MSG" ]; then
            COMMIT_MSG="Sync files from ${{ env.SOURCE_BRANCH_NAME }} to ${{ env.TARGET_BRANCH_NAME }}"
          fi
          
          # Check if there are changes to commit
          if git diff --cached --quiet; then
            echo "No changes to commit to ${{ env.TARGET_BRANCH_NAME }}."
          else
            echo "Committing to ${{ env.TARGET_BRANCH_NAME }} with message: $COMMIT_MSG"
            git commit -sm "$COMMIT_MSG" # -s for sign-off, -m for message
            
            echo "Pushing changes to remote branch ${{ env.TARGET_BRANCH_NAME }}..."
            git push origin synced-branch:${{ env.TARGET_BRANCH_NAME }}
          fi

  analyze:
    name: Analyze (${{ matrix.language }})
    runs-on: ubuntu-latest
    timeout-minutes: 360
    permissions:
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        include:
        - language: javascript-typescript
          build-mode: none
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        build-mode: ${{ matrix.build-mode }}

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"

  build-and-deploy-site:
    name: Build and Deploy Hugo
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 0
      - name: Setup Hugo
        uses: peaceiris/actions-hugo@v3
        with:
          hugo-version: 'latest'
          extended: true
      - name: Build site with Hugo
        run: hugo --minify --noBuildLock --ignoreCache --gc --logLevel debug && cp public/en/404.html public/404.html
      - name: Deploy to GitHub Pages
        if: github.event_name == 'push' && github.ref == 'refs/heads/staging'
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./public
          publish_branch: gh-pages